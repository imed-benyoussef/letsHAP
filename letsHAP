#!/usr/bin/env sh

##################################################
### letshap - David S. - 2016, 1st of October  ###
##################################################

###
### That program needs you to create a specific backend 
### in haproxy's configfile.
###

# Help
func_usage(){
cat << EOF

 ~ Usage : $0 [Option] [PARAM]

 Beware : First start, you have to run $0 --register [EMAIL]

Options
-------

-re | --register [EMAIL]
* Create /etc/letsencrypt directory after creating your account on let's Encrypt

-a  |--add [DOMAIN]
* Add certs files for the domain
* Create renewal config file for that domain
* Add and refresh HAProxy's ssl cert list
* HAProxy : Check config file && restart

-ra |--renew-all :
* Renew what's needed for renewed domains
* Regenerate .pem files for HAProxy
* HAProxy : Check config file && restart

-rev|--revoke [DOMAIN]
* to be coded if needed

...

EOF
}

var1="$1"
var2="$2"

# We need at least 1 argument
check_argv1_f(){
        if [[ ("${var1}" == '') ]]
        then
                func_usage
		echo "Parameter's missing ; at least one is needed - exit"
                exit 1
        fi
}
# Check vars
check_argv1_f

###############
### GLOBALS ###
###############
DATE=$(date +%Y%m%d-%H%M%S)
WORKING_DIR='/etc/letsencrypt'
HAPX_CONFFILE='/etc/haproxy/haproxy-base.conf'
HAPX_INSTANCE='haproxy@base' # use 'haproxy' if only one instance exists (default haproxy install)
HAPX_CERTDIR='/etc/haproxy/ssl'
HAPX_CERTLIST='/etc/haproxy/ssl/ssl.lst'
LETS_LIVE_PATH='/etc/letsencrypt/live'
LETS_ARCH_PATH='/etc/letsencrypt/archive'
INSTALLED_DOMAINS="$(ls -d ${LETS_LIVE_PATH}/* | cut -d'/' -f 5)"
OUTPUT_RD="${WORKING_DIR}/renewal/autorenew_domains.${DATE}"
PREFERRED_CHALLENGE='http-01'
CERTBOT_BK_NAME="http-01-port"
BK_PORT='63443'

# Else, we define more precisely the case of action

case ${var1} in
	-re | --register)
		todo='register'
		shift
		REGISTERING_EMAIL="${1}"
		;;
        -a |--add)
                todo="add"
                shift
		domainToAdd="${var2}"
        	;;
        -ra |--renew-all)
                todo="renew-all"
                shift
        	;;
        -rev|--revoke)
                todo="revoke"
                shift
		domainToRevoke="${var2}"
        	;;
	-h| --help)
		func_usage
		;;
        *)
                func_usage
        	;;
esac


#################
### FUNCTIONS ###
#################

_register(){
	email="${1}"
	if [[ -z "${REGISTERING_EMAIL}" ]] 
	then
		func_usage
		exit 1
	else
			certbot register --no-eff-email --agree-tos -m ${email}
	fi
}

_add_cert_for_domain (){
	myDomain="$1"
	# the magic
	echo -n "Let's create your cert for $myDomain... "
	echo "here we are"
	create_cert=$(certbot certonly --standalone --preferred-challenges ${PREFERRED_CHALLENGE} --${CERTBOT_BK_NAME} ${BK_PORT} --noninteractive -d ${myDomain})
        is_success=$(echo $?)
        if [ "$is_success" = '0' ]
        then
                echo "OK"
		echo -n "Updating HAPROXY certlist... "
		
        else
                echo "NOK - exit"
		echo $create_cert
                exit 1
        fi

}

_create_haproxy_fullchain (){
	domain="${1}"
	fullchainFileHAP="${LETS_ARCH_PATH}/${domain}/fullchain_haproxy.pem"
	fullchainFile="${LETS_LIVE_PATH}/${domain}/fullchain.pem"
	privkeyFile="${LETS_LIVE_PATH}/${domain}/privkey.pem"
	if [ ! -d "${LETS_ARCH_PATH}/${domain}" ]
	then 
		echo "Domain ${domain} has no certificate installed on this server - exit"
		exit 1
	fi
	echo "Creating HAPROXY fullchain file for domain ${domain}... "
        for file in "${fullchainFile}" "${privkeyFile}"
        do
	        echo -n "cat $file : "
        	cat $file >> ${fullchainFileHAP} && echo -n "OK " || echo -n "NOK - "
                echo
	done
	echo -n "Creating symlink in live directory... "
	ln -s ${fullchainFileHAP} ${LETS_LIVE_PATH}/${domain}/ && echo OK || echo NOK
	echo -n "Adding line in ${HAPX_CERTLIST}... "
	sed -i "/${domain}/d" ${HAPX_CERTLIST}
	echo "${LETS_LIVE_PATH}/${domain}/fullchain_haproxy.pem ${domain}" >> ${HAPX_CERTLIST} && echo OK || echo NOK
	# We restart haproxy for instant production use of the domain
	_restart_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"
}

_renew_domains(){
	echo "**** Renewing all domains **** "
	renew=$(certbot renew --standalone --preferred-challenges ${PREFERRED_CHALLENGE} --${CERTBOT_BK_NAME} ${BK_PORT})
	is_success=$(echo $?)
	if [ "$is_success" = '0' ]
	then
		echo "$renew" > ${OUTPUT_RD}
		echo "OK" 
	else
		echo "NOK - exit"
		exit 1
	fi

}

_restart_haproxy (){
	conffile="$1"
	instance="${2}"
	check_conf=$(/usr/sbin/haproxy -f ${conffile} -c)
	is_success=$(echo $?)
	if [ $is_success -eq '0' ]
	then
		echo -n "Restarting haproxy (stop & start)... "
		systemctl stop ${instance}.service || echo -n "(Problem while stopping ${instance}.service)... "
		systemctl start ${instance}.service && echo OK || echo NOK
	else
		echo "Problem with HAPROXY config file - exit"
		exit 1
	fi
}

_update_haproxy_fullchains (){
	myOutputFile="$1"
        fullchainFileHAP="${LETS_ARCH_PATH}/${domain}/fullchain_haproxy.pem"
        fullchainFile="${LETS_LIVE_PATH}/${domain}/fullchain.pem"
        privkeyFile="${LETS_LIVE_PATH}/${domain}/privkey.pem"

	fullchainsToRenew=$( cat ${myOutputFile} | grep letsencrypt | grep success | awk '{print $1}')
	if [ "$fullchainsToRenew" != '' ]
	then
		echo "*** Renewing fullchains for HAPROXY ***"
		for cert in $fullchainsToRenew
		do
			echo "Fullchain to renew -> $cert"
			domain=$(echo $cert | cut -d'/' -f 5)
			# Backup the old fullchain file and freeing the file
			echo -n "Backup the old fullchain file of $domain : "
			if [ -f "${fullchainFileHAP}" ]
			then
				mv ${fullchainFileHAP} ${fullchainFileHAP}.${DATE} && echo OK || echo NOK
			else
				echo "doesn't exist - next"
			fi

			# generate the new one
			echo "Generating the new one... "
			for file in ${fullchainFile} ${privkeyFile} 
			do
				echo -n "cat $file : "
				cat ${file} >> ${fullchainFileHAP} && echo -n "OK " || echo -n "NOK - "
				echo
			done
		done

		# We need to restart HAPROXY, of course
		_restart_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"

	else
		echo "Nothing to update - exit"
		exit 0
	fi
}

################
#### ACTION ####
################

# Create HAProxy ssl list file DIR
if [[ ! -d "${HAPX_CERTDIR}" ]]
then
	read -p "Do you want to create ${HAPX_CERTDIR} ? [Y/n]" yn
	yn=${yn:Y}
	case $yn in
        	[Yy]* ) 
			mkdir -p ${HAPX_CERTDIR} 
			;;

	        [Nn]* ) 
			exit 
			;;

 	       * ) 
		      	echo " ~~ 0_o ~~ " 
			exit
			;;
	esac
fi
	
        case $todo in
		register)
			_register ${REGISTERING_EMAIL}
			;;
                add)
                	_add_cert_for_domain ${domainToAdd}
			_create_haproxy_fullchain ${domainToAdd}
                ;;

                renew-all)
			_renew_domains
                        _update_haproxy_fullchains $OUTPUT_RD
                ;;

                revoke)
                        echo "Function revoke haven't been coded yet"
                ;;
                *)
                        func_usage
                ;;
        esac

